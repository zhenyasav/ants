// Generated by CoffeeScript 1.6.3
var _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.World = (function(_super) {
  __extends(World, _super);

  function World() {
    _ref = World.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  World.prototype.size = 1000;

  World.prototype.food = 30;

  World.prototype.ants = 2;

  World.prototype.observe = function(pov, radius) {
    var k, obs, result, v;
    if (radius == null) {
      radius = 100;
    }
    obs = (function() {
      var _ref1, _results;
      _ref1 = this.visuals;
      _results = [];
      for (k in _ref1) {
        v = _ref1[k];
        if (radius > Math.abs(pov.distanceTo(v.root.position))) {
          _results.push(v);
        }
      }
      return _results;
    }).call(this);
    result = _.sortBy(obs, function(o) {
      var _ref1, _ref2;
      if ((o != null ? (_ref1 = o.root) != null ? _ref1.position : void 0 : void 0) instanceof THREE.Vector3) {
        return pov.distanceTo(o != null ? (_ref2 = o.root) != null ? _ref2.position : void 0 : void 0);
      }
    });
    return result;
  };

  World.prototype.visuals = function() {
    var i, id, visuals, _i, _ref1,
      _this = this;
    visuals = {
      grid: function() {
        return new Grid({
          size: _this.size,
          step: _this.size / 10
        });
      },
      nest: function() {
        return new Nest({
          ants: _this.ants,
          world: _this
        });
      }
    };
    for (i = _i = 0, _ref1 = this.food; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      id = "food:" + i;
      visuals[id] = function() {
        return new Food({
          world: _this,
          id: id,
          x: Math.random() * 2 * _this.size - _this.size,
          z: Math.random() * 2 * _this.size - _this.size
        });
      };
    }
    return visuals;
  };

  return World;

})(Visual);
