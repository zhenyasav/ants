// Generated by CoffeeScript 1.6.3
var colors,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

colors = {
  yellow: 0xFFEE30,
  red: 0xFF2D00,
  green: 0x00FF2A
};

this.Pheromone = (function(_super) {
  __extends(Pheromone, _super);

  Pheromone.prototype.radius = 20;

  Pheromone.prototype.decay = 0.0005;

  Pheromone.prototype.maxopacity = 0.5;

  Pheromone.prototype.getcolor = function() {
    switch (this.type) {
      case 'normal':
        return colors.yellow;
      case 'food':
        return colors.green;
      case 'danger':
        return colors.red;
    }
  };

  Pheromone.prototype.update = function(t) {
    Pheromone.__super__.update.call(this, t);
    this.health -= this.decay;
    this.objects.blob.material.opacity = this.maxopacity * this.health;
    if (this.health < 0) {
      this.health = 0;
      return this.world.remqueue.push(this.id);
    }
  };

  function Pheromone(o) {
    this.health = 1;
    Pheromone.__super__.constructor.call(this, o);
  }

  Pheromone.prototype.generators = function() {
    return {
      blob: function() {
        var geo, mat, mesh;
        geo = new THREE.CircleGeometry(this.radius, 4);
        mat = new THREE.MeshBasicMaterial({
          color: this.getcolor(),
          opacity: this.maxopacity,
          transparent: true
        });
        mesh = new THREE.Mesh(geo, mat);
        mesh.rotation.set(-Math.PI / 2, 0, 0);
        return mesh;
      }
    };
  };

  return Pheromone;

})(Visual);
