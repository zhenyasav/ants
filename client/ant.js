// Generated by CoffeeScript 1.6.3
var PheromoneEmitter, colors,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

colors = {
  yellow: 0xFFEE30,
  red: 0xFF2D00,
  green: 0x00FF2A
};

PheromoneEmitter = (function() {
  PheromoneEmitter.prototype.rate = 1500;

  function PheromoneEmitter(o) {
    _.extend(this, o);
  }

  PheromoneEmitter.prototype.emit = function() {
    var h, id, _ref;
    this.lastemit = Date.now();
    id = "smell:" + (this.world.newid()) + ":" + this.mood;
    h = (function() {
      switch (this.mood) {
        case 'food':
          return 1;
        default:
          return 0.1;
      }
    }).call(this);
    return (_ref = this.world) != null ? _ref.addqueue.push([
      id, new Pheromone({
        id: id,
        health: h,
        x: this.ant.root.position.x,
        z: this.ant.root.position.z,
        type: this.mood,
        world: this.world
      })
    ]) : void 0;
  };

  PheromoneEmitter.prototype.setMood = function(m) {
    if (this.mood !== m) {
      this.emit();
      return this.mood = m;
    } else if ((this.lastemit == null) || (Date.now() - this.lastemit) > this.rate) {
      return this.emit();
    }
  };

  return PheromoneEmitter;

})();

this.Ant = (function(_super) {
  __extends(Ant, _super);

  Ant.prototype.size = 15;

  Ant.prototype.fov = 140;

  Ant.prototype.maxfood = 1;

  Ant.prototype.colormap = {
    normal: 'yellow',
    food: 'green'
  };

  Ant.prototype.limits = {
    normal: {
      speed: 10,
      steer: 4
    },
    food: {
      speed: 5,
      steer: 2
    }
  };

  function Ant(o) {
    Ant.__super__.constructor.call(this, o);
    this.speed = new THREE.Vector3(0, 0, 0);
    this.steer = new THREE.Vector3(0, 0, 0);
    this.baggage = {};
  }

  Ant.prototype.initialize = function() {
    return this.emitter = new PheromoneEmitter({
      mood: 'normal',
      world: this.world,
      ant: this
    });
  };

  Ant.prototype.visuals = function() {};

  Ant.prototype.update = function() {
    var action, actions, brake, followNose, parameter, random, spread, think, thought, towards, _results,
      _this = this;
    Ant.__super__.update.call(this);
    spread = function(min, max) {
      return min + Math.random() * (max - min);
    };
    brake = function() {
      var retro;
      retro = _this.speed.clone().negate();
      if (retro.length() > _this.limits[_this.emitter.mood].steer) {
        retro.setLength(_this.limits[_this.emitter.mood].steer);
      }
      return retro;
    };
    towards = function(p, minspeed) {
      var steer, targetspeed;
      if (minspeed == null) {
        minspeed = 0;
      }
      targetspeed = p.clone().sub(_this.root.position.clone());
      if (targetspeed.length() > _this.limits[_this.emitter.mood].speed) {
        targetspeed.setLength(_this.limits[_this.emitter.mood].speed);
      }
      if (targetspeed.length() < minspeed) {
        targetspeed.setLength(minspeed);
      }
      steer = targetspeed.sub(_this.speed);
      if (steer.length() > _this.limits[_this.emitter.mood].steer) {
        steer.setLength(_this.limits[_this.emitter.mood].steer);
      }
      return steer;
    };
    random = function() {
      var r, steer;
      r = function() {
        return spread(-_this.limits[_this.emitter.mood].steer, _this.limits[_this.emitter.mood].steer);
      };
      steer = new THREE.Vector3(r(), 0, r());
      if (steer.length() > _this.limits[_this.emitter.mood].steer) {
        steer.setLength(_this.limits[_this.emitter.mood].steer);
      }
      return steer;
    };
    followNose = function(s) {
      var avg, own, p, pheromones, sums, x, y, z;
      pheromones = _.select(s, function(f) {
        return f instanceof Pheromone;
      });
      p = new THREE.Vector3(0, 0, 0);
      if (pheromones.length) {
        sums = {
          x: 0,
          y: 0,
          z: 0
        };
        _.each(pheromones, function(p) {
          var d;
          d = p.root.position.distanceTo(_this.root.position);
          sums.x += p.root.position.x * p.health / d;
          sums.y += p.root.position.y * p.health / d;
          return sums.z += p.root.position.z * p.health / d;
        });
        x = sums.x / pheromones.length;
        y = sums.y / pheromones.length;
        z = sums.z / pheromones.length;
        avg = new THREE.Vector3(x, y, z);
        p = towards(avg, _this.limits[_this.emitter.mood].speed * 0.5);
      }
      if (!(p != null ? p.length() : void 0)) {
        p = random();
      }
      own = _this.speed.clone().setLength(_this.limits[_this.emitter.mood].speed);
      own.lerp(p, 0.8);
      return {
        mood: 'food' in _this.baggage ? 'food' : 'normal',
        steer: own
      };
    };
    think = function(s) {
      var delta, distance, food, nearest, nest, _ref, _ref1, _ref2, _ref3, _ref4;
      if ('food' in _this.baggage) {
        nest = _.select(s, function(f) {
          return f instanceof Nest;
        });
        if (nest != null ? nest.length : void 0) {
          nest = _.first(nest);
          distance = nest.root.position.clone().sub((_ref = _this.root) != null ? _ref.position : void 0);
          if ((distance != null ? distance.length() : void 0) < 0.01) {
            if (_this.speed.length() === 0) {
              nest.food += _this.baggage.food;
              console.log("NEST: " + nest.food);
              delete _this.baggage.food;
            }
            return {
              mood: 'food',
              steer: brake()
            };
          } else {
            return {
              mood: 'food',
              steer: towards(nest.root.position)
            };
          }
        } else {
          return followNose(s);
        }
      } else {
        food = _.select(s, function(f) {
          return f instanceof Food;
        });
        if (food.length) {
          nearest = _.first(food);
          distance = nearest != null ? (_ref1 = nearest.root) != null ? (_ref2 = _ref1.position) != null ? (_ref3 = _ref2.clone()) != null ? _ref3.sub((_ref4 = _this.root) != null ? _ref4.position : void 0) : void 0 : void 0 : void 0 : void 0;
          if ((distance != null ? distance.length() : void 0) < 0.01) {
            if (_this.speed.length() === 0) {
              if (_this.baggage.food == null) {
                _this.baggage.food = 0;
              }
              _this.baggage.food += delta = Math.min(_this.maxfood, nearest.size);
              nearest.setSize(nearest.size - delta);
            }
            return {
              mood: 'food',
              steer: brake()
            };
          } else {
            return {
              mood: 'food',
              steer: towards(nearest.root.position)
            };
          }
        } else {
          return followNose(s);
        }
      }
    };
    actions = {
      steer: function(d) {
        _this.speed = d;
        _this.objects.arrow.lookAt(_this.speed);
        if (_this.speed.length() > _this.limits[_this.emitter.mood].speed) {
          _this.speed.setLength(_this.limits[_this.emitter.mood].speed);
        }
        return _this.root.position.add(_this.speed);
      },
      mood: function(m) {
        _this.emitter.setMood(m);
        return _this.objects.fov.material.color.set(colors[_this.colormap[m]]);
      }
    };
    thought = think(this.world.observe(this.root.position, this.fov));
    _results = [];
    for (action in thought) {
      parameter = thought[action];
      if (action in actions) {
        _results.push(actions[action](parameter));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Ant.prototype.generators = function() {
    return {
      arrow: function() {
        var dir, length, origin;
        dir = this.speed;
        origin = new THREE.Vector3(0, 0, 0);
        length = this.speed.length();
        return new THREE.ArrowHelper(dir, origin, length, colors.yellow);
      },
      body: function() {
        var body, geo, mat;
        geo = new THREE.SphereGeometry(this.size, 1, 1);
        mat = new THREE.MeshNormalMaterial();
        body = new THREE.Mesh(geo, mat);
        body.position.set(0, this.size, 0);
        return body;
      },
      fov: function() {
        var geo, mat, mesh;
        geo = new THREE.CircleGeometry(this.fov, 20);
        mat = new THREE.MeshBasicMaterial({
          color: 0x00FF2A,
          opacity: 0.05,
          transparent: true
        });
        mesh = new THREE.Mesh(geo, mat);
        mesh.rotation.set(-Math.PI / 2, 0, 0);
        return mesh;
      }
    };
  };

  return Ant;

})(Visual);
