// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

this.Visualizr = (function(_super) {
  __extends(Visualizr, _super);

  Visualizr.prototype.width = null;

  Visualizr.prototype.height = null;

  Visualizr.prototype.viewAngle = 45;

  Visualizr.prototype.near = 0.0001;

  Visualizr.prototype.far = 100000;

  Visualizr.prototype.ortho = false;

  Visualizr.prototype.statsMode = 0;

  Visualizr.prototype.generators = function() {
    return {
      hemilight: function() {
        var hemiLight;
        hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);
        hemiLight.color.setHSL(0.6, 1, 0.6);
        hemiLight.groundColor.setHSL(0.095, 1, 0.75);
        hemiLight.position.set(0, 500, 0);
        return hemiLight;
      },
      toplight: function() {
        var l;
        l = new THREE.PointLight(0xFFFFFF, 1);
        l.position.setY(1000);
        return l;
      },
      bottomlight: function() {
        var l;
        l = new THREE.PointLight(0xFFFFFF, 0.4);
        l.position.setY(-100);
        return l;
      },
      ambientLight: function() {
        return new THREE.AmbientLight(0x101010);
      },
      camera: function() {
        var c;
        if (this.ortho) {
          this.width = this.$el.width();
          this.height = this.$el.height();
          c = new THREE.OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, this.near, this.far);
          c.position.setZ(5000);
        } else {
          c = new THREE.PerspectiveCamera(this.viewAngle, this.width / this.height, this.near, this.far);
          c.position.setY(1000);
        }
        return c;
      }
    };
  };

  Visualizr.prototype.visuals = function() {
    return {};
  };

  Visualizr.prototype.refresh = function() {
    var h, w;
    w = this.width = this.$el.width();
    h = this.height = this.$el.height();
    if (!this.ortho) {
      this.objects.camera.aspect = w / h;
      this.objects.camera.updateProjectionMatrix();
    }
    return this.renderer.setSize(w, h);
  };

  function Visualizr(o) {
    var init, _ref,
      _this = this;
    Visualizr.__super__.constructor.call(this, o);
    if (!(this.container instanceof $ && ((_ref = this.container) != null ? _ref.length : void 0))) {
      this.container = $('body');
    }
    this.renderer = new THREE.WebGLRenderer();
    this.el = this.renderer.domElement;
    this.$el = $(this.el);
    this.container.append(this.el);
    this.stats = new Stats();
    this.stats.setMode(this.statsMode);
    this.stats.domElement.style.position = 'absolute';
    this.stats.domElement.style.top = 0;
    this.stats.domElement.style.left = 0;
    this.container.append(this.stats.domElement);
    $(window).on('resize', function() {
      return _this.refresh();
    });
    init = function() {
      var frame, s;
      if (!_this.width) {
        _this.width = _this.$el.width();
      }
      if (!_this.height) {
        _this.height = _this.$el.height();
      }
      _this.renderer.setSize(_this.width, _this.height);
      _this.$el = $(_this.el);
      _this.scene = new THREE.Scene();
      if (_this.ortho) {
        s = 0.3;
        if (typeof Label !== "undefined" && Label !== null) {
          Label.spriteScale = 0.4;
        }
      } else {
        s = 1;
        if (typeof Label !== "undefined" && Label !== null) {
          Label.spriteScale = 110;
        }
      }
      _this.render();
      _this.root.scale.set(s, s, s);
      _this.controls = new THREE.OrbitControls(_this.objects.camera, _this.el);
      frame = function() {
        _this.stats.begin();
        requestAnimationFrame(frame);
        _this.controls.update();
        _this.renderer.render(_this.scene, _this.objects.camera);
        return _this.stats.end();
      };
      return frame();
    };
    setTimeout(init, 1);
  }

  return Visualizr;

})(Visual);
